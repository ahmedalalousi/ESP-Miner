Step 1: Create the Voltage Model
Step 2: Add Voltage Service (src/app/services/voltage.service.ts):
Step 3: Create Voltage Monitor Component

Step 1: Add the interfaces to the voltage service file
Since this project doesn't use a separate models directory, let's follow their pattern. We'll create the service file with the interfaces at the top:
Create: main/http_server/axe-os/src/app/services/voltage.service.ts

Step 2: Create the Voltage Monitor Component
Create the component directory and files:
Create: main/http_server/axe-os/src/app/components/voltage-monitor/voltage-monitor.component.ts

Step 3: Create the Component Template
Create: main/http_server/axe-os/src/app/components/voltage-monitor/voltage-monitor.component.html

Step 4: Step 4: Create the Component Styles
Create: main/http_server/axe-os/src/app/components/voltage-monitor/voltage-monitor.component.scss

Step 5a: First, let's add the component to the declarations
In app.module.ts, add VoltageMonitorComponent to the declarations array

typescriptdeclarations: [
  AppComponent,
  HomeComponent,
  EditComponent,
  // ... other components
  VoltageMonitorComponent,  // Add this
  ANSIPipe,
  DateAgoPipe,
  HashSuffixPipe
],

Step 5b: Now we need to update the component template to use PrimeNG
Let's check what PrimeNG modules are available:

main/http_server/axe-os/src/app/prime-ng.module.ts:

import { NgModule } from '@angular/core';
import { RadioButtonModule } from 'primeng/radiobutton';
import { ButtonModule } from 'primeng/button';
import { ChartModule } from 'primeng/chart';
import { CheckboxModule } from 'primeng/checkbox';
import { DropdownModule } from 'primeng/dropdown';
import { FileUploadModule } from 'primeng/fileupload';
import { InputGroupModule } from 'primeng/inputgroup';
import { InputGroupAddonModule } from 'primeng/inputgroupaddon';
import { InputTextModule } from 'primeng/inputtext';
import { SidebarModule } from 'primeng/sidebar';
import { SliderModule } from 'primeng/slider';

import { CardModule } from 'primeng/card';
import { AccordionModule } from 'primeng/accordion';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { PanelModule } from 'primeng/panel';

const primeNgModules = [
    SidebarModule,
    InputTextModule,
    CheckboxModule,
    DropdownModule,
    SliderModule,
    ButtonModule,
    FileUploadModule,
    ChartModule,
    InputGroupModule,
    InputGroupAddonModule,
    RadioButtonModule,
    CardModule,           // Add this
    AccordionModule,      // Add this
    ProgressSpinnerModule,// Add this
    PanelModule          // Add this
];

@NgModule({
    imports: [
        ...primeNgModules
    ],
    exports: [
        ...primeNgModules
    ],
})
export class PrimeNGModule { }

We need to add some PrimeNG modules for our component. Let's update the PrimeNG module first.
Step 6: Update PrimeNG Module
Edit: main/http_server/axe-os/src/app/prime-ng.module.ts
Add these imports at the top:

typescriptimport { CardModule } from 'primeng/card';
import { AccordionModule } from 'primeng/accordion';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { PanelModule } from 'primeng/panel';

Thenadd them to the primeNgModules array:

const primeNgModules = [
    SidebarModule,
    InputTextModule,
    CheckboxModule,
    DropdownModule,
    SliderModule,
    ButtonModule,
    FileUploadModule,
    ChartModule,
    InputGroupModule,
    InputGroupAddonModule,
    RadioButtonModule,
    CardModule,           // Add this
    AccordionModule,      // Add this
    ProgressSpinnerModule,// Add this
    PanelModule          // Add this
];

Now let's update the HTML template to use PrimeNG components.
Step 7: Update the Component Template with PrimeNG
Replace the content of: main/http_server/axe-os/src/app/components/voltage-monitor/voltage-monitor.component.html

<p-card styleClass="voltage-monitor-card">
  <ng-template pTemplate="header">
    <div class="card-header">
      <i class="pi pi-bolt"></i>
      <span>Voltage Monitor</span>
    </div>
  </ng-template>
  
  <div *ngIf="isLoading" class="loading-spinner">
    <p-progressSpinner strokeWidth="4" animationDuration=".5s"></p-progressSpinner>
  </div>

  <div *ngIf="error" class="error-message">
    <i class="pi pi-exclamation-triangle"></i>
    {{ error }}
  </div>

  <div *ngIf="!isLoading && !error && voltageStatus">
    <div class="status-info">
      <p>
        <strong>Status:</strong> 
        <span [class.enabled]="voltageStatus.enabled">
          {{ voltageStatus.enabled ? 'Enabled' : 'Disabled' }}
        </span>
      </p>
      <p>
        <strong>Hardware:</strong> 
        <span [class.present]="voltageStatus.hardware_present">
          {{ voltageStatus.hardware_present ? 'Detected' : 'Not Detected' }}
        </span>
      </p>
      <p *ngIf="voltageStatus.hardware_present">
        <strong>Scan Interval:</strong> {{ voltageStatus.scan_interval_ms }}ms
      </p>
    </div>

    <div *ngIf="voltageStatus.hardware_present && voltageStatus.chains" class="chains-container">
      <h3>Chain Voltages</h3>
      
      <p-accordion>
        <p-accordionTab *ngFor="let chain of voltageStatus.chains">
          <ng-template pTemplate="header">
            <span class="chain-header">
              <span class="chain-title">Chain {{ chain.chain_id }}</span>
              <span class="chain-info">
                {{ chain.average_voltage.toFixed(2) }}V avg | 
                {{ chain.suggested_frequency }} MHz suggested
                <i *ngIf="chain.failed_asics > 0" class="pi pi-exclamation-triangle warning-icon"></i>
              </span>
            </span>
          </ng-template>
          
          <div class="chain-details">
            <div class="voltage-stats">
              <p><strong>Total Voltage:</strong> {{ chain.total_voltage.toFixed(2) }}V</p>
              <p><strong>Min Voltage:</strong> {{ chain.min_voltage.toFixed(2) }}V</p>
              <p><strong>Max Voltage:</strong> {{ chain.max_voltage.toFixed(2) }}V</p>
              <p><strong>Failed ASICs:</strong> {{ chain.failed_asics }}</p>
            </div>
            
            <div class="asics-grid">
              <div *ngFor="let asic of chain.asics" 
                   class="asic-voltage"
                   [class.invalid]="!asic.valid">
                <span class="asic-id">ASIC {{ asic.id }}</span>
                <span class="asic-value">{{ asic.voltage.toFixed(3) }}V</span>
              </div>
            </div>
          </div>
        </p-accordionTab>
      </p-accordion>
    </div>

    <div *ngIf="!voltageStatus.hardware_present" class="no-hardware">
      <i class="pi pi-info-circle"></i>
      <p>Voltage monitoring hardware not detected. Connect ADS1115 to enable monitoring.</p>
    </div>
  </div>
</p-card>

We also need to update the SCSS file slightly for the PrimeNG icons. Let me know when you've updated the HTML.

Here's the github link to this repository:

https://github.com/ahmedalalousi/ESP-Miner/tree/feature/voltage-monitoring
